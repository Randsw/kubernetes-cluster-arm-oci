- name: Get playbook executor username
  become: false
  local_action: command whoami
  register: playbook_executor_username
  changed_when: false

- name: Get playbook host username
  become: false
  command: whoami
  register: ansible_host_username
  changed_when: false

# - name: Install Flux
#   command: curl -s https://fluxcd.io/install.sh | sudo bash

# - name: Install SOPS
#   apt:
#     deb: https://github.com/mozilla/sops/releases/download/v3.7.1/sops_3.7.1_amd64.deb

- name: Create gpg key for flux
  shell: 
    cmd: | 
        gpg --batch --full-generate-key <<EOF
        %no-protection
        Key-Type: 1
        Key-Length: 4096
        Subkey-Type: 1
        Subkey-Length: 4096
        Expire-Date: 0
        Name-Comment: {{ KEY_COMMENT}}
        Name-Real: {{ KEY_NAME }}
        EOF

- name: Get key FP
  command: "gpg --list-secret-keys {{ KEY_NAME }}"
  register: gpg_fp_out

- name: Debug gpg_fp
  set_fact:
        gpg_fp: "{{ gpg_fp_out.stdout_lines[1] | trim }}"

- name: Export pub key 
  shell: "gpg --export --armor {{ gpg_fp }} > /home/{{ ansible_host_username.stdout }}/.gnupg/.sops.pub.asc"

- name: Copy public gpg key to ansible host
  fetch:
    src: "/home/{{ ansible_host_username.stdout }}/.gnupg/.sops.pub.asc"
    dest: "/home/{{ playbook_executor_username.stdout }}/.gnupg/"
    flat: yes

- name: Create namespace for flux
  shell: kubectl create namespace flux-system --dry-run=client -o yaml | kubectl apply -f - 

- name: Create SOPS secret in flux-system namespace
  shell: gpg --export-secret-keys --armor "{{ gpg_fp }}" | kubectl create secret generic sops-gpg --namespace=flux-system --from-file=sops.asc=/dev/stdin

- name: Delete secret key from ansible provisioner
  command: "gpg --batch --yes --delete-secret-keys {{ gpg_fp }}"

- name: Create gitlab-token secret
  shell: kubectl create secret generic gitlab-token --from-literal=token={{ gitlab_token }} -n flux-system --dry-run=client -o yaml | kubectl apply -f -

- name: Create gitlab-runner namespace
  shell: kubectl create namespace gitlab-runner --dry-run=client -o yaml | kubectl apply -f - 

- name: Create gitlab-runner registration token secret
  shell: kubectl create secret generic gitlab-runner-registration-token --from-literal=runnerRegistrationToken={{ gitlab_registration_token }} -n gitlab-runner --dry-run=client -o yaml | kubectl apply -f -

- name: Create web-app namespace
  shell: kubectl create namespace web-app --dry-run=client -o yaml | kubectl apply -f - 

- name: Create secret to pull images from github container registry
  shell: kubectl create secret docker-registry github-registry --docker-server=ghcr.io/randsw --docker-username=randsw --docker-password={{ GHCR_token }} -n web-app

- name: Create monitoring namespace
  shell: kubectl create namespace monitoring --dry-run=client -o yaml | kubectl apply -f - 

- name: Create telegram bot secret
  shell: kubectl create secret generic alertmanager-bot --from-literal=admin={{ TG_ADMIN }} --from-literal=token={{ TG_TOKEN }} -n monitoring --dry-run=client -o yaml | kubectl apply -f -

- name: Create dex namespace
  shell: kubectl create namespace web-app --dry-run=client -o yaml | kubectl apply -f -

- name: Create dex github secret
  shell: kubectl create secret generic dex-github --from-literal=GITHUB_CLIENT_ID={{ GITHUB_DEX_CLIENT_ID }} --from-literal=GITHUB_CLIENT_SECRET={{ GITHUB_DEX_CLIENT_SECRET }} -n dex --dry-run=client -o yaml | kubectl apply -f -

- name: Load kube-api cert
  slurp:
    src: "/etc/kubernetes/pki/ca.crt"
  register: kube_api_cert

- name: Create kube-api cert secret
  shell: kubectl create secret generic dex-kube-cert --from-literal=KUBE_API_CERT={{ kube_api_cert | b64encode }} -n dex --dry-run=client -o yaml | kubectl apply -f -

- name: Create cookie secret for oauth2
  shell: openssl rand -base64 32 | head -c 32
  register: oauth_cookie_secret

- name: Create oauth2-proxy secret
  shell: kubectl create secret generic oauth2-proxy-github --from-literal=client-secret={{ GITHUB_OAUTH_CLIENT_SECRET}} --from-literal=client-id={{ GITHUB_OAUTH_CLIENT_ID }} --from-literal=cookie-secret={{ oauth_cookie_secret }} -n web-app --dry-run=client -o yaml | kubectl apply -f -

- name: Create dir for Flux
  file:
    path: /home/{{ ansible_host_username.stdout }}/flux
    state: directory
    mode: '0755'

- name: Get Flux base files to ansible host
  ansible.builtin.git:
    repo: https://gitlab.com/randsw06/k8s-oci-arm.git
    dest: /home/{{ ansible_host_username.stdout }}/flux
    
- name: Deploy Flux
  command: kubectl apply --kustomize=/home/{{ ansible_host_username.stdout }}/flux/cluster/base/flux-system
  retries: 2
  delay: 3
  register: result
  until: result.rc == 0
